<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://dlecocq.github.com/atom.xml" rel="self"/>
  <link href="http://dlecocq.github.com/"/>
  <updated>2013-03-13T15:48:53-07:00</updated>
  <id>http://dlecocq.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running sudo with pssh]]></title>
    <link href="http://dlecocq.github.com/blog/2012/10/11/running-sudo-with-pssh/"/>
    <updated>2012-10-11T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2012/10/11/running-sudo-with-pssh</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.theether.org/pssh/" title="Pssh">pssh</a> tool is great. Just great. At SEOmoz
we use a number of deployment schemes, but every so often I find myself
needing to log into 50 machines and perform some simple one-off command. I’ve
written such a line many times:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="k">for </span>i in <span class="o">{</span>01..05<span class="o">}</span>; <span class="k">do </span>ssh -t ec2-user@some-host-<span class="nv">$i</span> <span class="s1">&#39;sudo ...&#39;</span>; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is fine if the command is quick, but it <em>really</em> sucks if it’s
something that takes more than just a few seconds. So in the absence of
needing to use sudo (and thus the <code>-t</code> flag), pssh makes it easy to run these
all in parallel:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pssh -i --host<span class="o">=</span>some-host-<span class="o">{</span>01..50<span class="o">}</span> -l ec2-user <span class="s1">&#39;hostname&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Coercing pssh to create a pseudo-tty to enable sudo commands was a little
tricky, though:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># And now I can sudo!</span>
</span><span class="line">pssh -x <span class="s1">&#39;-t -t&#39;</span> -i --host<span class="o">=</span>some-host-<span class="o">{</span>01..50<span class="o">}</span> -l ec2-user <span class="s1">&#39;sudo hostname&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rough Array Hash Benchmark]]></title>
    <link href="http://dlecocq.github.com/blog/2012/07/21/rough-array-hash-benchmark/"/>
    <updated>2012-07-21T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2012/07/21/rough-array-hash-benchmark</id>
    <content type="html"><![CDATA[<p>I recently went on a mission to find (and perhaps build) a better dictionary.
I’ve been looking at <a href="http://www.naskitis.com/">Dr. Askitis’ work</a> on
so-called HAT-tries, which are something akin to a burst trie. It all seems
reasonable enough, and his experimental results seem very promising. In
particular, I was looking for an open source version of this data structure
that didn’t preclude commercial use (as Askitis’ version does).</p>

<p>HAT-tries rely on another of Askitis’ data structures, the
<a href="http://crpit.com/confpapers/CRPITV91Askitis.pdf">hash array map</a>.
Essentially, it’s a hash table, but instead of using linked lists to store
nodes containing the various key/value pairs stored in a particular slot, each
slot is actually a buffer that stores a bunch of packed information, including the number of items in the buffer, the length of the string key, and the value
itself. The idea is that this arrangement is much more conducive to caching
(and hardware prefetches out of memory since each slot is a contiguous slab of memory). Contrast this to a more conventional approach in which each slot is a
linked list that must be traversed to find the actual key/value pair that’s
being retrieved. <!-- more --></p>

<p>I should note that there are a <a href="https://github.com/dcjones/hat-trie">couple</a>
of <a href="https://github.com/chris-vaszauskas/hat-trie">implementations</a> that I
looked at before venturing out to
<a href="https://github.com/dlecocq/hat-trie">make my own</a>. The design is actually
relatively simple: hash a provided key to map it onto one of many internal
buckets. If that bucket is empty, allocate enough memory to store an 1) integer counter of the number of pairs in this buffer, 2) integer length of
the provided key, 3) a byte copy of the key itself, and 4) a byte copy of the
value.</p>

<p>For the hash, I chose my personal favorite,
<a href="http://www.azillionmonkeys.com/qed/hash.html">superfasthash</a>. I actually
began by having my implementation follow the STL style of being able to
provide a memory allocator, and when I didn’t see the performance I wanted, I
switched to <code>malloc</code> and <code>realloc</code> as prescribed in the paper. Even then, I
did not see the performance I wanted. Of course, I imagine that my
implementation could be improved, but I felt like it was certainly at least
reasonable. I tried a number of alterations, including preallocating more
memory than was needed in each slot with hopes that realloc would save me. No
dice.</p>

<p>My benchmark was focused on speed. Memory was less of a concern for my needs,
and so long as it stayed mostly unnoticeable (say, less than a couple hundred megabytes for a million keys), I was happy. I decided to give it a run against
<code>std::map</code> (mostly to feel better about myself), and then <code>tr1::unordered_map</code>
(mostly out of hubris). Although my rough implementation doesn’t (yet) include
fancy-schmancy features like iterators, it <em>barely</em> edged out
<code>tr1::unordered_map</code> for a small number of keys (less than 10k). When scaling
up, however, the story was less than impressive.</p>

<p>This benchmark was performed using the first <em>k</em> words from Askitis’
<code>distinct_1</code> data set, and the strings were loaded into memory before running
the tests. These numbers are each the best of 10 consecutive runs (hoping to
warm the cache and cast each of these in the best possible light), with each
of these containers being a mapping of <code>std::string</code> to <code>size_t</code>. Each key was
associated with the value 1, and when querying, it was verified that the
resulting value was still 1. The query was performed on the same input set of
keys, and random query was run exactly the same, but after performing
<code>std::random_shuffle</code> on the vector. It was compiled with <code>g++-4.2</code> with flags
<code>-O3 -Wall</code> (though other optimization levels had almost no impact). I also
tried with <code>clang-2.1</code> and the results were very similar. I encourage you to
run the same bench on your own system and your own compiler version.</p>

<p>[caption id=”attachment_1073” align=”aligncenter” width=”300” caption=”Insertion Time Relative to std::tr1::unordered_map”]<a href="http://dan.lecocq.us/wordpress/wp-content/uploads/2012/07/insert.png"><img src="http://dan.lecocq.us/wordpress/wp-content/uploads/2012/07/insert-300x200.png" alt="Insertion Time Relative to std::tr1::unordered_map" title="Insertion Time" width="300" height="200" class="size-medium wp-image-1073" /></a>[/caption]</p>

<p>[caption id=”attachment_1074” align=”aligncenter” width=”300” caption=”Query Time Relative to std::tr1::unordered_map”]<a href="http://dan.lecocq.us/wordpress/wp-content/uploads/2012/07/query.png"><img src="http://dan.lecocq.us/wordpress/wp-content/uploads/2012/07/query-300x200.png" alt="Query Time Relative to std::tr1::unordered_map" title="Query Time" width="300" height="200" class="size-medium wp-image-1074" /></a>[/caption]</p>

<p>[caption id=”attachment_1075” align=”aligncenter” width=”300” caption=”Random Query Time Relative to std::tr1::unordered_map”]<a href="http://dan.lecocq.us/wordpress/wp-content/uploads/2012/07/random.png"><img src="http://dan.lecocq.us/wordpress/wp-content/uploads/2012/07/random-300x200.png" alt="Random Query Time Relative to std::tr1::unordered_map" title="Random Query Time" width="300" height="200" class="size-medium wp-image-1075" /></a>[/caption]</p>

<p>While <code>tr1::unordered_map</code> scaled better, at least for the purposes of
HAT-trie, the number of items in the hash is relatively limited (roughly in
the range of 10k). When testing the HAT-trie itself, I think the hash array
map has earned at least a chance for a trial. For those curious,
<a href="https://github.com/dlecocq/hat-trie">my source is available on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taskmaster from DISQUS]]></title>
    <link href="http://dlecocq.github.com/blog/2012/05/20/taskmaster-from-disqus/"/>
    <updated>2012-05-20T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2012/05/20/taskmaster-from-disqus</id>
    <content type="html"><![CDATA[<p>I have been waiting for an occasion to use <a href="https://github.com/dcramer/taskmaster" target="_blank">dcramer’s taskmaster</a>, which is a queueing system meant for large, infrequently-invoked (even one-off) tasks. In his <a href="http://justcramer.com/2012/05/04/distributing-work-without-celery/" target="_blank">original blog post</a> brings up one of the features that was particularly striking to me – you don’t put jobs into the queue per se, but you describe a generator that yields all the jobs that should be put in the queue.</p>

<p>Occasionally at SEOmoz, we want to perform sanity checks on customer accounts, or transitioning from one backend to another, etc. In particular, we’ve been transitioning to a new queueing system, and we wanted to go through every customer and ensure that they had a recent crawl, and further, were definitely in the new system. Unfortunately, much of the data we have to check involves a lookup into Cassandra (that can’t be turned into a bulk operation very easily). Cassandra’s not necessarily the problem, but just the latency between requests. So, spawn off 20 or so workers with taskmaster, each given the details about the customer that we needed to verify.</p>

<p>The serial version takes 4-5 hours. It took 15 minutes to get taskmaster installed and grokked, and then the task itself took an hour. Already a win!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEOmoz Blog Post -- Introducing qless]]></title>
    <link href="http://dlecocq.github.com/blog/2012/05/18/seomoz-blog-post-introducing-qless/"/>
    <updated>2012-05-18T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2012/05/18/seomoz-blog-post-introducing-qless</id>
    <content type="html"><![CDATA[<p>I recently wrote a new <a href="http://devblog.seomoz.org/2012/05/introducing-qless-our-new-job-queue/">dev blog post</a> at SEOmoz about <a href="https://github.com/seomoz/qless">qless</a>, a project I’ve been working on. It’s a queueing system that takes advantage of Redis 2.6’s server-side Lua scripting.</p>

<p>Happy queueing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis and Lua for Robust, Portable Libraries]]></title>
    <link href="http://dlecocq.github.com/blog/2012/03/11/redis-and-lua-for-robust-portable-libraries/"/>
    <updated>2012-03-11T00:00:00-08:00</updated>
    <id>http://dlecocq.github.com/blog/2012/03/11/redis-and-lua-for-robust-portable-libraries</id>
    <content type="html"><![CDATA[<p>Redis 2.6 has support for server-side Lua scripting. Off hand, this may not seem like a big deal, but it offers some surprisingly powerful features. I’ll give a little bit of background on why I’m interested in this in the first place, and then I’ll show why this unassuming feature is so extremely useful for <strong>otherwise impossible atomic operations</strong>, as well as for <strong>easy language portability</strong> and <strong>performance</strong>.</p>

<p>For example, I’ve recently been working on a Redis-based queueing system (heavily inspired by Resque, but with some added twists) and a lot of functionality that I wanted to support would have been prohibitively difficult without Redis’ support for Lua. For example, I want to make sure that jobs submitted to this queueing system do not simply get dropped on the floor. A worker is given a temporary exclusive lock on a job, and must either complete it or heartbeat it within a certain amount of time. If that worker does not, it’s presumed that the worker dropped the job and it can be given to a new worker. <!-- more --></p>

<p>Now let’s imagine what this locking mechanism would have to look like in order to be correct. First, we’d probably maintain a list of jobs in a queue that have been popped off, but not yet completed, sorted by when their lock expires. When a client tries to get a job, it should first check for expired locks, and if it finds any, it should assume responsibility for those jobs. So this client sees an expired lock, and attempts to update the metadata associated with the job to reflect that it now has that job. In the mean time, the original client has swooped in and tried to complete the job despite the expired lock, removes the entry for the lock, and updates the job data to reflect its completion. It’s possible that the second client updates the job data after this, and inserts a new lock for itself, putting the system into an inconsistent state.</p>

<p>Yes, Redis has a mechanism for this, but it’s only so strong. There’s the <code>MULTI</code>, <code>WATCH</code> and <code>EXEC</code> combo, which allows you to detect the situation when another client has tried to modify a key for which you’re trying to perform an atomic operation and allows you to try the operation again. But for highly contentious keys, you can spend a lot of time backing off and failing. That’s frustrating.</p>

<p>Redis’ Lua support has an interesting guarantee: <strong>Lua scripts in Redis are guaranteed to be executed atomically</strong>. No other commands can be run on the Redis instance while the Lua script is running. With that in place, you are free to no worry in the slightest about these sorts of race conditions, because they just won’t happen. You can access as many keys as you’d like, without having to worry about <code>WATCH</code>-ing them for changes, and implement as simple or complex a locking mechanism as you’d like.</p>

<p>Another interesting feature that comes out of this is that if you implement your next Redis-based library as a collection of Lua scripts, then you can write bindings in other languages in a flash. The only requirement is that those new bindings must be able to read in a file, load the script, and then have Redis bindings to invoke those scripts. Clients no longer have to worry about mimicking any arbitrarily complex logic in their own language – they just rely on these Lua scripts that can be shared across all the bindings! This may go without saying, but maintaining bindings is something that can be a bit of a nuisance. One example that jumps to mind immediately is working with Redis from Node.js if a lot of successive commands have to be chained together. It can get extremely messy.</p>

<p>Not only this laundry list of wonderful features spring out of this Lua support, but it’s surprisingly performant. Without giving too much away, at SEOmoz, I recently implemented the queueing system I mentioned to support scheduled work items, heartbeating, priority and statistics collection in a collection of about 10-12 Lua scripts. Initial benchmarks have hit 4500 job pop/complete transactions per second on a 2011-ish MacBook Pro. At least for our purposes, this is <em>plenty</em> of room to roam. And let me assure you, these scripts are not always simple, and so the fact that Redis can still maintain good performance in the face of arbitrary scripts speaks volumes about the quality of Redis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cost of Except in Python]]></title>
    <link href="http://dlecocq.github.com/blog/2012/01/08/the-cost-of-except-in-python/"/>
    <updated>2012-01-08T00:00:00-08:00</updated>
    <id>http://dlecocq.github.com/blog/2012/01/08/the-cost-of-except-in-python</id>
    <content type="html"><![CDATA[<p>I was curious recently about how much of a performance penalty try/except blocks incur in python. Specifically, 1) does it incur much of a cost if no exception is thrown (accepting only a penalty when something exceptional happens) and 2) how does it compare to if/else statements where possible? A snippet to answer the first question:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class="line">
</span><span class="line"><span class="n">withTryNoThrow</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;</span>
</span><span class="line"><span class="s">	try:</span>
</span><span class="line"><span class="s">		a = int(&#39;5&#39;)</span>
</span><span class="line"><span class="s">	except ValueError:</span>
</span><span class="line"><span class="s">		pass</span>
</span><span class="line"><span class="s">&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">withTryThrow</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;</span>
</span><span class="line"><span class="s">	try:</span>
</span><span class="line"><span class="s">		a = int(&#39;z&#39;)</span>
</span><span class="line"><span class="s">	except ValueError:</span>
</span><span class="line"><span class="s">		pass</span>
</span><span class="line"><span class="s">&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">withoutTry</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;</span>
</span><span class="line"><span class="s">	a = int(&#39;5&#39;)</span>
</span><span class="line"><span class="s">&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">results</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="s">&#39;withoutTry&#39;</span>    <span class="p">:</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">withoutTry</span>    <span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">100000</span><span class="p">),</span>
</span><span class="line">	<span class="s">&#39;withTryNoThrow&#39;</span><span class="p">:</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">withTryNoThrow</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">100000</span><span class="p">),</span>
</span><span class="line">	<span class="s">&#39;withTryThrow&#39;</span>  <span class="p">:</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">withTryThrow</span>  <span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">results</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&#39;</span><span class="si">%20s</span><span class="s"> =&gt; </span><span class="si">%f</span><span class="s">s&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For me, the results looked something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">  <span class="n">withTryNoThrow</span> <span class="o">=&gt;</span> <span class="mf">0.082781</span><span class="n">s</span>
</span><span class="line">      <span class="n">withoutTry</span> <span class="o">=&gt;</span> <span class="mf">0.082880</span><span class="n">s</span>
</span><span class="line">    <span class="n">withTryThrow</span> <span class="o">=&gt;</span> <span class="mf">0.261147</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It would appear that while catching exceptions is expensive, catching non-exceptions is very cheap. I imagine that the reason is mostly because when you throw an exception, you actually instantiate an exception object of some kind, which necessarily introduces some overhead. In the absence of that object creation, things can be relatively fast. <!-- more --></p>

<p>Now, for the second question. This particular question came up when deciding whether or not I should try fetching a key from a dictionary and catching an exception when it’s absent, or if I should use the get method and then check if the result is None.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class="line">
</span><span class="line"><span class="n">setup</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;d = dict({</span>
</span><span class="line"><span class="s">	&#39;some&#39;   : 1,</span>
</span><span class="line"><span class="s">	&#39;keys&#39;   : 2,</span>
</span><span class="line"><span class="s">	&#39;are&#39;    : 3,</span>
</span><span class="line"><span class="s">	&#39;present&#39;: 4,</span>
</span><span class="line"><span class="s">	&#39;others&#39; : 5,</span>
</span><span class="line"><span class="s">	&#39;arent&#39;  : 6</span>
</span><span class="line"><span class="s">})&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">tryExcept</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;</span>
</span><span class="line"><span class="s">	try:</span>
</span><span class="line"><span class="s">		a = d[&#39;doesntexist&#39;]</span>
</span><span class="line"><span class="s">	except KeyError:</span>
</span><span class="line"><span class="s">		pass</span>
</span><span class="line"><span class="s">&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">getIfElse</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;</span>
</span><span class="line"><span class="s">	a = d.get(&#39;doesntexist&#39;, None)</span>
</span><span class="line"><span class="s">	if a == None:</span>
</span><span class="line"><span class="s">		pass</span>
</span><span class="line"><span class="s">	else:</span>
</span><span class="line"><span class="s">		pass</span>
</span><span class="line"><span class="s">&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">getNoIf</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;</span>
</span><span class="line"><span class="s">	a = d.get(&#39;doesntexist&#39;, None)</span>
</span><span class="line"><span class="s">&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">results</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="s">&#39;tryExcept&#39;</span> <span class="p">:</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">tryExcept</span><span class="p">,</span> <span class="n">setup</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">100000</span><span class="p">),</span>
</span><span class="line">	<span class="s">&#39;getIfElse&#39;</span> <span class="p">:</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">getIfElse</span><span class="p">,</span> <span class="n">setup</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">100000</span><span class="p">),</span>
</span><span class="line">	<span class="s">&#39;getNoIf&#39;</span>   <span class="p">:</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">getNoIf</span>  <span class="p">,</span> <span class="n">setup</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">results</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&#39;</span><span class="si">%20s</span><span class="s"> =&gt; </span><span class="si">%f</span><span class="s">s&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For this second test, the results looked something like this for me:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">         <span class="n">getNoIf</span> <span class="o">=&gt;</span> <span class="mf">0.019980</span><span class="n">s</span>
</span><span class="line">       <span class="n">tryExcept</span> <span class="o">=&gt;</span> <span class="mf">0.083638</span><span class="n">s</span>
</span><span class="line">       <span class="n">getIfElse</span> <span class="o">=&gt;</span> <span class="mf">0.027422</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Obviously, if your program is amenable to just using a default value, then happiness ensues. Failing that, using the get method and then if/else is much faster than the try/except alternative.</p>

<p><em>Fine Print</em>: I am running Python 2.7.1 on a 2011-ish MacBookPro.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef-Solo and God -- A Divine Duo]]></title>
    <link href="http://dlecocq.github.com/blog/2012/01/06/chef-solo-and-god-a-divine-duo/"/>
    <updated>2012-01-06T00:00:00-08:00</updated>
    <id>http://dlecocq.github.com/blog/2012/01/06/chef-solo-and-god-a-divine-duo</id>
    <content type="html"><![CDATA[<p>I recently wrote a new post on the <a href="http://devblog.seomoz.org/2012/01/chef-solo-and-god-a-divine-duo/" title="SEOmoz Dev Blog Post">SEOmoz dev blog</a> about our deployment with chef-solo and god on EC2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python's zlib and gzip, Performance, and You]]></title>
    <link href="http://dlecocq.github.com/blog/2011/12/16/python%27s-zlib-and-gzip%2C-performance%2C-and-you/"/>
    <updated>2011-12-16T00:00:00-08:00</updated>
    <id>http://dlecocq.github.com/blog/2011/12/16/python&#8217;s-zlib-and-gzip,-performance,-and-you</id>
    <content type="html"><![CDATA[<p>I have recently been working with streaming gzipped uploads to S3, and I’ve come to find that python’s built-in gzip library is quite <a href="http://aripollak.com/pythongzipbenchmarks/">a bit slower</a> than the command-line utility gzip. Thus, I became curious as to where the performance problems were.</p>

<p>Gzip is actually just a file format, apparently most commonly used with zlib’s compression. It provides a file header and a footer and a little bit of metadata, but it really is merely a wrapper around zlib. However, while python’s zlib module is a compiled C extension, the gzip module is a pure python implementation that makes calls to zlib. In fact, the zlib source is included in the Python distribution (at least in 2.7.2) and the C extension is just a wrapper around those function calls.</p>

<p>Interestingly enough, the zlib extension is fast. Really fast. Competitively fast. Even comparable to the gzip command line utility, which, though it does the extra work of writing headers, becomes a nearly apples-to-apples comparison with a large enough input file.</p>

<pre lang="python">
import zlib
import time
import subprocess

with file('testing.in', 'w+') as f:
	test = 'hello how are you today?' * 10000000
	f.write(test)

# First, let's zlib
start = -time.time()
with file('testing.in.Z', 'w+') as outf:
	with file('testing.in') as inf:
		outf.write(zlib.compress(inf.read()))

start += time.time()
print 'zlib: %fs' % start

# Now the subprocess
start = -time.time()
r = subprocess.check_call(['gzip', '-f', 'testing.in'])
start += time.time()
print 'gzip: %fs' % start
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python's Logging Module - Exceptions]]></title>
    <link href="http://dlecocq.github.com/blog/2011/10/19/pythons-logging-module-exceptions/"/>
    <updated>2011-10-19T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/10/19/pythons-logging-module-exceptions</id>
    <content type="html"><![CDATA[<p>I’m a big fan of python’s <a href="http://docs.python.org/library/logging.html" title="Python Logging" target="_blank">logging</a> module. It supports configuration files, multiple handlers (for both writing to the screen while writing to a file, for example), output formatting like crazy, and many other delicious features. One that I’ve only recently encountered is <strong>its exception method.</strong></p>

<p>The basic idea of the logging module is that you can get a logger from a factory (that allows multiple pieces of code to easily access the same logical logging entity). From there, you add handlers that output messages to various places (files, screen, sockets, HTTP endpoints, etc.). Every message you log is done at a specific level, and then the configuration of the logger determines whether or not to record messages of a certain severity:</p>

<pre lang="python">
import logging

# Get a logger instance
logger = logging.getLogger('testing')

# Some initialization of handlers here, 
# unimportant in this context

# Print out at various levels
logger.warn('Oops! Something happened')
logger.info('Did you know that X?')
logger.debug('Index is : %i' % ...)
</pre>

<p>What’s great about the module is that it <strong>separates your messages from how they’re displayed and where.</strong> For debugging, it’s nice to be able to flip a switch and turn on a more verbose mode. Or for production to tell it to shut up and only log messages that are really critical. What the ‘exception’ method does is to not only <strong>log a message as an error, but to also print a nice backtrace of where the error took place</strong>!</p>

<pre lang="python">
try:
	# So something here
	raise Exception('oops!')
except:
	logger.exception('Such-and-such failed! Stack trace to follow:')
	# Stack trace appears in the log
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Never Trust Callbacks]]></title>
    <link href="http://dlecocq.github.com/blog/2011/10/16/never-trust-callbacks/"/>
    <updated>2011-10-16T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/10/16/never-trust-callbacks</id>
    <content type="html"><![CDATA[<p>It’s a lesson that has now been hammered home repeatedly in my head: never trust callbacks. Just don’t. Go ahead and execute them, but if you trust them to not throw exceptions or errors, you are in for a world of unhappiness.</p>

<p>For me, I first learned this lesson when making use of twisted, writing some convenience classes to help with some of the somewhat odd class structure they have. (Sidebar: twisted is an extremely powerful framework, but their naming schemes are not what they could be.) Twisted makes heavy use of a deferred model where callbacks are executed in separate threads, while mission-critical operations run in the main thread. My convenience classes exposed further callbacks that could be overridden in subclasses, but I made the critical mistake of not executing that code inside of a try/except block.</p>

<p>Twisted has learned this lesson. In fact, their deferred model makes it very hard to throw a real exception. If your callbacks fail, execution takes a different path – calling errback functions. In fact, twisted is so pessimistic about callbacks (rightly so) that you just can’t make enough exceptions to break out of errback functions. However, wrapped in my convenience classes were pieces of code that were mission critical, and my not catching exceptions in the callbacks I provided was causing me a world of hurt.</p>

<p>That whole experience was enough to make me learn my lesson. Then, a few days ago I encountered it again in a different library, in a different language, in a different project, where I was exposing callbacks for user interface code in JavaScript. The logical / functional chunk of code exposed events that the UI would be interested in, but was too trusting, leading to errors in callbacks skipping over critical parts of the code.</p>

<p>All in all, <strong>when exposing callbacks, never trust a callback to not throw an exception.</strong> Even if you wrote the callbacks it’s executing (as was the case with both of these instances, at least in the beginning). <strong>Callbacks are a courtesy – a chance for code to be notified of an event,</strong> but like many courtesies, they can be abused.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python and Arbitrary Function Arguments - **kwargs]]></title>
    <link href="http://dlecocq.github.com/blog/2011/09/14/python-and-arbitrary-function-arguments-kwargs/"/>
    <updated>2011-09-14T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/09/14/python-and-arbitrary-function-arguments-kwargs</id>
    <content type="html"><![CDATA[<p>Python has a pretty useful policy: named arguments. When you call a function, you can explicitly say that such-and-such value is what you’re providing for a particular argument, and can even include them in any order:</p>

<pre lang="python">
def hello(first, last):
	print 'Hello %s %s' % (first, last)

hello(last='Lecocq', first='Dan')
</pre>

<p>In fact, you can programmatically gain insight into functions with the <a href="http://docs.python.org/library/inspect.html" title="inspect" target="_blank">inspect module</a>. But suppose you want to be able to accept an arbitrary number of parameters. For example, for a printf equivalent. Or where I encountered it in wanting to read a module name from a configuration file, as well as the arguments to instantiate it. In this case, you’d get the module and class as a string and then a dictionary of the arguments to make an instance of it. Of course, Python always has a way. In this case, **kwargs.</p>

<p>This is actually dictionary unpacking, taking all the keys in a dictionary and mapping them to argument names. For example, in the above example, I could say:</p>

<pre lang="python">
hello(**{'last':'Lecocq', 'first':'Dan'})
</pre>

<p>Of course, in that case it’s a little verbose, but if you’re getting a dictionary of arguments programmatically, then it’s invaluable. But wait, there’s more! Not only can you use the **dict operator to map a dictionary into parameters, but you can accept arbitrary parameters with it, too!</p>

<pre lang="python">
def kw(**kwargs):
	for key, value in kwargs.items():
		print '%s =&gt; %s' % (key, value)

kw(**{'hello':'Howdy!', 'first':'Dan'})
kw(hello='Howdy!', first='Dan')
</pre>

<p>Magic! <strong>No matter how you invoke the function, it has access to the parameters.</strong>  You can even split the difference, making some parameters named and some parameters variable. For example, if you wanted to create an instance of a class that you passed a name in for, initialized with the arguments you give it:</p>

<pre lang="python">
def factory(module, cls, **kwargs):
	# The built-in __import__ does just what it sounds like
	m = __import__(module)
	# Now get the class in that module
	c = getattr(m, cls)
	# Now make an instance of it, given the args
	return c(**kwargs)

factory('datetime', 'datetime', year=2011, month=11, day=8)
factory('decimal', 'Decimal', value=7)
</pre>

<p>This is one place where Python’s flexibility is extremely useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kevin Mitnick's Ghost in the Wires]]></title>
    <link href="http://dlecocq.github.com/blog/2011/09/12/kevin-mitnicks-ghost-in-the-wires/"/>
    <updated>2011-09-12T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/09/12/kevin-mitnicks-ghost-in-the-wires</id>
    <content type="html"><![CDATA[<p>I recently finished reading one of <a href="http://en.wikipedia.org/wiki/Kevin_mitnick" title="Kevin Mitnick" target="_blank">Kevin Mitnick</a>’s books, <a href="http://www.amazon.com/Ghost-Wires-Adventures-Worlds-Wanted/dp/0316037702/" title="Ghost in the Wires" target="_blank">Ghost in the Wires</a>. Fantastic. I constantly found it amazing that someone had lived that life, hacking, evading capture, changing identities. Reads like an action movie at many points, and in fact, <a href="http://www.imdb.com/title/tt0159784/" title="Takedown" target="_blank">several</a> <a href="http://www.imdb.com/title/tt0086567/" title="War Games" target="_blank">movies</a> have been made loosely (and one very loosely) based on his life. Mitnick often talks about how much the “myth of Mitnick” is inflated or distorted, especially in the media and particularly with the movies.</p>

<p>As it turns out, Mitnick lived briefly in Seattle, and with my interest piqued, I figured I might be able to track down his old apartment. He describes going home one day before realizing his was being followed, and in the course of the description he mentions a few street names and the part of town he lived in. And at the end of the book, there’s a photo of the apartment, slightly too grainy to read the name of the building. But clear enough to read the number. A little time with Google Maps and <a href="http://maps.google.com/maps?q=5227+brooklyn+ave,+seattle&amp;ll=47.66676,-122.313173&amp;spn=0.008425,0.019205&amp;t=m&amp;z=16&amp;vpsrc=0&amp;layer=c&amp;cbll=47.667291,-122.314173&amp;panoid=KavdrrIXVgsQzdBGPyfBvg&amp;cbp=12,281.94,,1,0.79" title="Kevin Mitnick's old apartment" target="_blank">found it</a>! Being so close, I figured I’d drop by to take a picture:</p>

<p><a href="http://dan.lecocq.us/wordpress/wp-content/uploads/2011/09/photo-1.jpg"><img src="http://dan.lecocq.us/wordpress/wp-content/uploads/2011/09/photo-1-300x224.jpg" alt="" title="Kevin Mitnick&#039;s Old Apartment" width="300" height="224" class="aligncenter size-medium wp-image-1031" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Named Pipes]]></title>
    <link href="http://dlecocq.github.com/blog/2011/09/11/named-pipes/"/>
    <updated>2011-09-11T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/09/11/named-pipes</id>
    <content type="html"><![CDATA[<p>Yesterday I encountered a concept I hadn’t known about: named pipes. They’re essentially a <strong>path that acts as a pipe</strong> for reading from / writing to. In that sense, you work with them like with file redirection and traditional files. But that data doesn’t get stored anywhere really permanent. All data that goes through it is meat to be written once, and read once, and it comes with a performance boost of not having to write large chunks to disk.</p>

<p>Pipes, for those who don’t know, are the bees knees. They’re the cat’s meow. They allow you to (as the name implies) make a pipeline between one or more programs, with the output of one feeding into the input of others. Suppose, for example, that we want to find out how many files that contain ‘.a’ there are in a directory. There’s a tool you might know, ‘ls,’ that lists all the files in a directory. And ‘grep’ is a tool to search for lines of text that match a regular expression. And ‘wc’ is a tool that can count the number of bytes, words, lines, etc. in a file.</p>

<p>Typically, each of these <strong>operates in isolation</strong>, reading from a file (in the case of grep and wc), or… standard input. And they all write to standard output. A pipe is away to hook up one’s process’ standard output file descriptor to the standard input file descriptor of the another, making one the <strong>producer of information and the other the consumer</strong>:</p>

<pre lang="bash">
ls -l /path/to/some/directory | grep '.a' | wc -l
</pre>

<p>This is typical of the design of many command line utilities. Most either come with an option to read from standard in (usually either the absence of a filename or a single ‘-‘). <strong>And most do exactly one task well</strong>. Each has one very specific purpose, but is generally happy to play along with others.</p>

<p>File redirection is another handy tool that is related to named pipes. File redirection lets you either read the contents of a file as if it were standard input, or have a process write to it as if it were standard output. Going back to the earlier example, if we wanted to store a list of the all such files in our own file called ‘list’:</p>

<pre lang="bash">
ls | grep '.a' &gt; list
</pre>

<p>Easy as pie. Now… for named pipes. They’re also called ‘<strong>FIFO</strong>’s for their first-in-first-out behavior. You can make one with ‘mkfifo &lt;filename&gt;’. And then, feel free to read from it and write to it. Perhaps in two different terminals:</p>

<pre lang="bash">
# In one terminal:
mkfifo test
cat &lt; test

# In another terminal:
echo 'hello' &gt; test
</pre>

<p>The first terminal, cat plugs along doing the one thing it knows how to do: display what it reads in out to standard out. Take a minute for what has just happened to sink in. You were able to have one process wait around until it had something read… from a pipe. And in a completely different terminal, you had a <em>different</em> process communicate with the first one through opening a file. This is a mechanism that’s commonly used for <strong>inter-process communication</strong> (IPC) for obvious reasons – everyone knows how to read from and write to a file, so it makes use of a known paradigm. But wait – it gets even better.</p>

<p>Suppose you want to aggregate some statistics about how many different types of requests your application serves, but you don’t want to have to write that in. Or maybe it’s an application that you know already just writes to a log file. Of course, you could trawl the log file, but there are conceivably cases where you don’t want the overhead of keeping around huge files, so you’d rather avoid it if possible. You have to be careful when doing this (not all applications play nicely with named pipes – mostly surrounding blocking described below), but chances are you might be able to dupe the application into just logging to a named pipe! If you remove the log file and in that same path you make a pipe, then your work is done – just read from that pipe to aggregate your statistics periodically. <strong>This works particularly well with the python logging module.</strong></p>

<p>Reading from and writing to a named pipe can be a little more nuanced, however. Some things to bear in mind:</p>

<ul>
<li><strong>Opening a named pipe can block</strong>, so consider opening them non-blocking. Of course, it depends on your access pattern, but if you&#8217;re not sure if another process has written to the pipe and you don&#8217;t want that to trip up your reading, non-blocking is the way to go.</li>

<li><strong>Named pipes have &#8216;no size.&#8217;</strong> If you write to a pipe, data gets queued up for the other end to read, but even before that gets read, stat(1) reports that the file has a size of 0 bytes. So, you can&#8217;t rely on a change in file size to know it&#8217;s ready for reading.</li>

<li><strong>Instead, use select, poll, epoll, etc. to detect read/write-ability on the pipe.</strong> If you&#8217;re only interested in one file descriptor, then you can go ahead and use select, but if you&#8217;re starting to listen to too many, perhaps one of the others is a better idea</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Stats in Python]]></title>
    <link href="http://dlecocq.github.com/blog/2011/09/07/system-stats-in-python/"/>
    <updated>2011-09-07T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/09/07/system-stats-in-python</id>
    <content type="html"><![CDATA[<p>Turns out, there’s a pretty handy package called <a href="http://code.google.com/p/psutil/" title="psutil" target="_blank">psutil</a> that allows you to not only gain insight into the currently-running process, but other processes, physical and virtual memory usage, and CPU usage. For example:</p>

<pre lang="python">
import psutil

psutil.phymem_usage().percent
# 31.2
psutil.virtmem_usage().percent
# 0.0
</pre>

<p>Pretty handy tool if you’re doing any sort of monitoring!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libcurl, curl_multi, and Endless DNS Pain]]></title>
    <link href="http://dlecocq.github.com/blog/2011/09/01/libcurl-curl_multi-and-endless-dns-pain/"/>
    <updated>2011-09-01T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/09/01/libcurl-curl_multi-and-endless-dns-pain</id>
    <content type="html"><![CDATA[<p><strong>Curl is an awesome tool.</strong> Awesome. For example, suppose we want to fetch a <em>bunch</em> of urls as quickly as possible from code. Enter <a href="http://curl.haxx.se/libcurl/c/libcurl-multi.html" title="curl_multi" target="_blank">curl_multi</a>, which allows you to manage several requests in flight at the same time. You periodically make a request to curl to see which handles are finished successfully and which are in error, and then add those handles back into a pool that can handle requests.</p>

<p>Any code that I use in this post will be in Python, using <a href="http://pycurl.sourceforge.net/" title="pycURL" target="_blank">pycurl</a> as, well, that’s what we’re using it in. The main flow of this has been (based on the <a href="http://pycurl.cvs.sourceforge.net/pycurl/pycurl/examples/retriever-multi.py?view=markup" title="pycURL Multi Example" target="_blank">example provided by pycurl</a>):
&lt;pre lang=&#8221;python&#8221;&gt;
import pycurl
# Declare a queue 
queue = [ url1, url2, … ]
inFlight = 0
# Make a multi handle
multi = pycurl.CurlMulti()
multi.handles = []
# Allocate a bunch of individual handlers
for i in range(poolSize):
	c = pycurl.Curl()
	# …
	multi.handles.append(c)
# Pool of our free handles
pool = multi.handles[:]
# Now, go through our requests:
while len(queue) or inFlight:
	c = pool.pop()
	# Make your request
	inFlight += 1
while True:
	ret, numHandles = multi.perform()
	if ret != pycurl.E_CALL_MULI_PERFORM:
		break
while True:
	numQ, ok, err = multi.info_read()
	# ok is a list of completed requests
	for c in ok:
		# Get your data out
		inFlight -= 1
	# err is a list of errored requests
	for c in err:
		# Maybe report an error
		inFlight -= 1
&lt;/pre&gt;</p>

<p>This is great – we get to make a bunch of requests and they respond quickly. But… there are some problems. When you start using thousands of handles, libcurl won’t miss a beat. Depending on how you have libcurl built, it may not have support for asynchronous DNS requests, and may in fact… <strong>use blocking DNS requests</strong>. So this high throughput means a lot of contention. Libcurl <em>can</em> do this, but it needs to be compiled against <a href="http://c-ares.haxx.se/" title="c-ares" target="_blank">c-ares</a>. Curl provides a quick way of telling you what it has support for:</p>

<pre lang="bash">
$&gt; curl --version
curl 7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smtp smtps telnet tftp 
Features: AsynchDNS GSS-Negotiate IPv6 Largefile NTLM SSL libz
</pre>

<p>If you don’t see AsynchDNS listed among those features, and you want to add support, this means DNS unpleasantness can ensue. Unfortunately, building and installing the c-ares library library isn’t the only concern. You may have gotten curl with your OS, or you may have gotten it through your package manager. But if you find you <em>need</em> this support, you’ll have to <strong>build libcurl from source.</strong> First, install some generic dependencies you’ll probably want to include:</p>

<pre lang="bash">
# On Ubuntu, it's pretty simple:
sudo apt-get install zlib1g-dev libssh2-dev libssl-dev libc-ares2 libc-ares-dev libidn11-dev libldab2-dev
# On Mac, you can 1) build from source, 2) use port
sudo port install libidn openssl libssh2 zlib c-ares
</pre>

<p>Then, you’ll just have to download, configure, compile and install libcurl:
&lt;pre lang=&#8221;bash&#8221;&gt;
# First, get the source:
curl -O http://curl.haxx.se/download/curl-7.21.7.tar.gz
tar xf curl-7.21.7.tar.gz
cd curl-7.21.7
# Now, build everything. This assumes that you installed stuff in /usr
./configure –with-{ssl,libss2,zlib,libidn}=/usr –enable-{ares,ldap}
make
sudo make install
&lt;/pre&gt;</p>

<p>And now, we have asynchronous DNS in libcurl! It’s really not a feature that’s mission critical for many / most applications of curl. I have invoked curl hundreds of time, and used libcurl on occasion, and have not found it to be an issue until this scale. There are some <a href="http://devblog.seomoz.org/2011/02/high-performance-libcurl-tips/" title="High-Performance Libcurl Tips" target="_blank">other issues</a> that a former SEOmoz’zer wrote about earlier this year, which we intend to include. For example, we may find that the curl-internal multi perform may be based heavily on select, in which case we’ll have to adapt our code to make use of epoll or kqueue. In all likelihood, we’d probably rather use <a href="http://monkey.org/~provos/libevent/" title="libevent" target="_blank">libevent</a>, which has <a href="http://code.google.com/p/pyevent/" title="pyevent" target="_blank">bindings</a> in python and helps to abstract the differences between BSD’s kqueue and epoll on Linux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEOmoz and Dev Blog Post]]></title>
    <link href="http://dlecocq.github.com/blog/2011/08/31/seomoz-and-dev-blog-post/"/>
    <updated>2011-08-31T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/08/31/seomoz-and-dev-blog-post</id>
    <content type="html"><![CDATA[<p>I began work almost a month ago at a Seattle company, <a href="http://www.seomoz.org/" title="SEOmoz" target="_blank">SEOmoz</a>. Interesting projects, talented people, and a good place to be. Today I posted my first contribution to their <a href="http://devblog.seomoz.org/" title="Dev Blog" target="_blank">Dev Blog</a> talking about <a href="http://devblog.seomoz.org/2011/08/launching-and-deploying-instances-with-boto-and-fabric/" title="Launching and Deploying Instances with Boto and Fabric" target="_blank">scripting the launching  and deployment of EC2 instances with boto and frabric</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yes(1)]]></title>
    <link href="http://dlecocq.github.com/blog/2011/08/18/yes1/"/>
    <updated>2011-08-18T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/08/18/yes1</id>
    <content type="html"><![CDATA[<p>Yes, yes(1) is built-in to Mac and Linux (at least OS X Lion and Ubuntu 11.04). And, as you might guess, it repeatedly prints a string of your choice (‘y’ by default) followed by a newline to stdout. Its sole purpose in life is to automate agreeing to prompts. I encountered it recently in a script that was automating RAID array deployment on EC2 ephemeral disks:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># mdadm doesn&#39;t let you automate by default, so pipe in &#39;y&#39;!</span>
</span><span class="line">yes | mdadm ...
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Build Notes]]></title>
    <link href="http://dlecocq.github.com/blog/2011/08/14/keeping-build-notes/"/>
    <updated>2011-08-14T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/08/14/keeping-build-notes</id>
    <content type="html"><![CDATA[<p>I initial put off upgrading to Snow Leopard until almost a year after its release because I was worried about rebuilding my development environment. It’s amazing how many packages one accumulates over time without thinking about it, and when you have deadlines to meet it can be disastrous to risk your current working setup.</p>

<p>But rebuilding your development environment comes up more than just upgrading your OS. If you need to migrate to that new computer you got, or that work gave you, or help someone else get up and running with a project you’re thinking about releasing. Admittedly, it took me a little while to learn this lesson, but finally it’s drilled into my head: <strong>keep build notes!</strong></p>

<p>A couple weeks ago I was trying to install an internal package whose docs hadn’t been updated in a very long time. After struggling and hitting countless snags, I finally got it up and running when I got an email that was along the lines of, “Oh, if you could write down what problems you ran into, that would be great.” Fortunately, I just made notes of what I had done in order to get it built, and I was able to whip off a reply with speed that surprised the recipient.</p>

<p>Even at a system-wide level, I try to make it a habit to record every package I install/build associated with development. It makes it extremely easy to get set up on the next system, even if the instructions have to be updated for a new environment. I call it a manifest and I manage it as a flat file, though I know there are package managers that can do a lot of heavy lifting for me. However, I find that no package manager is perfect and so even if I make use of one for certain libraries, it’s important to me to have everything documented in one place. At a minimum (and you probably don’t need more than this) keep the following:</p>
<ol>
	<li><strong>Package name and version</strong> - Maybe you needed readline 6.1 to get your project running, or you know that such-and-such version is buggy for your purposes.</li>
	<li><strong>Why you installed it</strong> - I find that many libraries I install are used for a particular project, and so it&#8217;s useful to have the motivation for getting it.</li>
	<li><strong>How you installed it</strong> - Whether it was macports or a typical configure, make and install, how did you build it? Did you need special flags to make it go? You will absolutely forget these, so why not write them down? Even just copy and paste from your history!</li>
</ol>

<p>I can’t stress enough how much easier this has made my development life in a lot of ways, and how little a time investment it is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conditional Compilation]]></title>
    <link href="http://dlecocq.github.com/blog/2011/08/08/conditional-compilation/"/>
    <updated>2011-08-08T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/08/08/conditional-compilation</id>
    <content type="html"><![CDATA[<p>Last week I had the (dis)pleasure of porting some code to Mac, and today it came time to merge with the original codebase. As helpful as it was to use macros for different code paths, we needed something in the makefile to optionally add flags when compiling on Mac.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">// This is all well and good</span>
</span><span class="line"><span class="cp">#ifndef __APPLE__</span>
</span><span class="line">    <span class="c1">// Do your Linux-y includes here</span>
</span><span class="line"><span class="cp">#else</span>
</span><span class="line">    <span class="c1">// Do your Apple-y includes here</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Apparently, there are a couple conventions for doing this. First, you can inject a configuration step (à la autoconf, for example) which would detect what platform you’re building on in a robust way and build a Makefile for you. Second, if you’re lazy or autoconf would be like hitting a fly with a hammer, you can use make’s conditionals:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Ensure that this gets declared in time,</span>
</span><span class="line"><span class="c"># and fill it with the result of `uname`</span>
</span><span class="line">UNAME :<span class="o">=</span> <span class="k">$(</span>shell uname<span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># If the environment is Darwin...</span>
</span><span class="line">ifeq <span class="o">(</span><span class="k">$(</span>UNAME<span class="k">)</span>, Darwin<span class="o">)</span>
</span><span class="line">    <span class="nv">CXXFLAGS</span> <span class="o">=</span> <span class="c"># Something Apple-y</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="k">    </span><span class="nv">CXXFLAGS</span> <span class="o">=</span> <span class="c"># Something Linux-y</span>
</span><span class="line">endif
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Simple enough!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type-Conversion Operators' Unintuitive Behavior]]></title>
    <link href="http://dlecocq.github.com/blog/2011/08/06/type-conversion-operators-unintuitive-behavior/"/>
    <updated>2011-08-06T00:00:00-07:00</updated>
    <id>http://dlecocq.github.com/blog/2011/08/06/type-conversion-operators-unintuitive-behavior</id>
    <content type="html"><![CDATA[<p>A feature I only recently learned about are type-conversion operators. For any class, if you want to support type conversion to any type, you can do so by merely declaring (and of course defining) operators of the form <code>operator type()</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="k">operator</span> <span class="kt">bool</span><span class="p">();</span>
</span><span class="line"><span class="k">operator</span> <span class="n">thing</span><span class="p">();</span>
</span><span class="line"><span class="k">operator</span> <span class="n">Foo</span><span class="p">();</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>While this is fine and dandy (and admittedly obviously attractive in ways), there is a big problem SEOmoz co-worker Brandon pointed out: <strong>There’s no way to determine which code path will be taken.</strong></p>

<p>For a little bit of context, I came across a set of type-conversion operators that seemed reasonable enough. They tried to cover the whole gamut of possible primitive types:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">operator</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class="line"><span class="k">operator</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class="line"><span class="k">operator</span> <span class="kt">unsigned</span> <span class="kt">long</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="k">operator</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">();</span> <span class="p">}</span>
</span><span class="line"><span class="k">operator</span> <span class="kt">long</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="k">operator</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">();</span> <span class="p">}</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>The compiler has absolutely no problem with the above declaration.</strong> The class you put that in will happily compile, but the problem arises when you try to use it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">Widget</span> <span class="n">w</span><span class="p">(...);</span>
</span><span class="line"><span class="c1">// Suddenly, the compiler complains, not knowing which operator to use</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At this point, the compiler puts its foot down. What to me seems unintuitive is that even though there is an conversion operator to this exact type, the compiler won’t use it. What’s even more bizarre to me is that typedefs and in-header definitions can further muddle things up:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">operator</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class="line"><span class="k">operator</span> <span class="kt">long</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class="line"><span class="k">operator</span> <span class="kt">int</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class="line"><span class="k">operator</span> <span class="kt">short</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class="line"><span class="c1">// For whatever reason, let&#39;s say you do this:</span>
</span><span class="line"><span class="k">operator</span> <span class="n">int32_t</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">operator</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Even though <code>int32_t</code> will be the same as one of those other types, this will still compile.</strong> It makes a certain amount of sense when viewed in the context of the compiler because after all, it only does so much processing on headers because they’re going to be directly included wherever you use them. <strong>You actually don’t get duplicate symbols in this case, and thus no “previously-defined” error.</strong> In reality, their function definitions are the same, and they actually get mangled to the same name (on my system the operators for <code>int32_t</code> and <code>int</code> both mangle to ‘_ZNK6WidgetcviEv’):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># See what mangled symbols actually appear</span>
</span><span class="line">nm -j widget.o
</span><span class="line"><span class="c"># See what demangled symbols are actually there</span>
</span><span class="line">nm -j widget.o | sed s/__/_/ | grep -v .eh | c++filt -n
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above (with in-header definitions) is exactly what we encountered in the code. We (well, a co-worker) suspected that the reason that the sort of multiple definition was allowed was that the names were getting mangled based on their typedef name string (mangled on <code>int32_t</code> instead of the actual type it maps to), but this is not the case. If you move the in-header definition for the <code>int32_t</code> operator into the .cpp file, the compiler will complain to you earlier.</p>

<p>My first inclination when dealing with the “conversion to type long long is ambiguous” error was to ask for an explicit conversion: static_cast&lt;long long int&gt;(myWidget). However, this doesn’t work either. So even in this scenario, <strong>you can’t even ask for a specific type conversion operator.</strong> From what I can gather, type-conversion operators are a double-edged lightsaber: few things in C++ were added without a purpose, but it’s extremely important to understand that exact purpose and its risks. To require that type conversions are <strong>explicit</strong> you should generally use something like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">const</span> <span class="n">T</span> <span class="n">convert</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span> <span class="o">&lt;&gt;</span>
</span><span class="line"><span class="k">const</span> <span class="kt">bool</span> <span class="n">convert</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class="line"><span class="c1">// Your conversion to bool</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
